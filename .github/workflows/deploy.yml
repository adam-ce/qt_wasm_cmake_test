name: "Deploy"
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "deploy"
  cancel-in-progress: true

jobs:
  build-android:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        cmake_version: ['3.29.x', '3.30.x', '3.31.x']
        qtversion: ['6.8.1', '6.9.0']
          
    steps:
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential ninja-build openjdk-17-jdk
        echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64/" >> $GITHUB_ENV
        # dpkg-query -L  openjdk-17-jdk-headless
        
    - name: Setup cmake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: ${{ matrix.cmake_version }}
        
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true
        
    - name: Install Qt native version (the one provided by aqt doesn't seem to work)
      uses: jurplel/install-qt-action@v4
      with:
        aqtversion: '==3.1.*'
        version: ${{ matrix.qtversion }}
        host: 'linux'
        target: 'desktop'
        arch: 'linux_gcc_64'
        dir: '${{github.workspace}}/qt'
        install-deps: 'true'
        cache: true

    - name: Set QT_HOST_ROOT_DIR
      run: echo "QT_HOST_ROOT_DIR=${QT_ROOT_DIR}" >> "$GITHUB_ENV"
      
    - name: Install Qt crosscompile target version
      uses: jurplel/install-qt-action@v4
      with:
        aqtversion: '==3.1.*'
        version: ${{ matrix.qtversion }}
        host: linux
        target: 'android'
        arch: android_arm64_v8a
        dir: '${{github.workspace}}/qt'
        install-deps: 'true'
        modules: 'qtcharts qtpositioning'
        cache: true

    - name: Make qt cross binaries executable
      run: |
        chmod u+x ${QT_ROOT_DIR}/bin/*

    - name: Set reusable strings
      shell: bash
      run: |
        BUILD_DIR="${{ github.workspace }}/build"
        APK_TARGET="appMaterialTester"
        APK_PROJECT_DIR="MaterialTester"
        echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV
        echo "APK_TARGET=$APK_TARGET" >> $GITHUB_ENV
        
        echo "INSTALL_DIR=${{ github.workspace }}/install/android_arm64_v8a" >> $GITHUB_ENV
        echo "APK_DIR=$BUILD_DIR/android-build/build/outputs/apk/" >> $GITHUB_ENV
        echo "ANDROID_BUILD_DIR=$BUILD_DIR/android-build/" >> $GITHUB_ENV
        echo "DEPLOYMENT_SETTINGS=$BUILD_DIR/android-$APK_TARGET-deployment-settings.json" >> $GITHUB_ENV
  
    - name: cmake version
      run: cmake --version
      
    - name: Configure
      env:
        CMAKE_PREFIX_PATH: ${{env.QT_ROOT_DIR}}/lib/cmake
      run: >
        ${QT_ROOT_DIR}/bin/qt-cmake
        -G Ninja
        -B $BUILD_DIR
        -DQT_HOST_PATH=${QT_HOST_ROOT_DIR}
        -DCMAKE_BUILD_TYPE=Release
        ${{ matrix.additional_cmake_flags }}
        -S ${{ github.workspace }}

    - name: Build
      run: |
        cmake --build $BUILD_DIR --target install 2>&1 | tee build_output.log
        if grep -q "One Definition Rule" build_output.log; then
          echo "Error: Found 'One Definition Rule' in build output."
          exit 1
        fi

        
  build-wasm:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        cmake_version: ['3.29.x', '3.30.x', '3.31.x']
        qtversion: ['6.8.1', '6.9']
        include:
          - qtversion: '6.8.1'
            webassembly_version: "3.1.56"
          - qtversion: '6.9'
            webassembly_version: "3.1.74"
            
    steps:
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential ninja-build
        
    - name: Setup cmake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: ${{ matrix.cmake_version }}
        
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true
    
    - uses: mymindstorm/setup-emsdk@v13
      with:
        version: ${{matrix.webassembly_version}}
        
    - name: Install Qt native version (required for cross building)
      uses: jurplel/install-qt-action@v4
      with:
        aqtversion: '==3.1.*'
        version: ${{matrix.qtversion}}
        host: linux
        target: 'desktop'
        arch: linux_gcc_64
        dir: '${{github.workspace}}/qt_host'
        install-deps: 'true'
        modules: 'qtshadertools'
        cache: false
        
    - name: Set reusable strings
      shell: bash
      run: |
        echo "BUILD_DIR=$(pwd)/build" >> $GITHUB_ENV
        echo "INSTALL_DIR=install" >> $GITHUB_ENV
        echo "QT_WASM_ROOT_DIR=$(pwd)/qt_wasm_lite" >> $GITHUB_ENV
        echo "QT_SRC_CONFIGURE=$(pwd)/qt_src/configure" >> $GITHUB_ENV
        echo "QT_LITE_CONFIG=$(pwd)/misc/qt_lite.txt" >> $GITHUB_ENV
        cd ${{github.workspace}}/qt_host/Qt/ && ls
      
    - name: Versions
      run: |
        emcc -v
        echo "cmake version:"
        cmake --version
        
    - name: Download Qt
      shell: bash
      run: |
        git clone --branch ${{matrix.qtversion}} git://code.qt.io/qt/qt5.git qt_src
        mkdir qt_wasm_build
        cd qt_wasm_build
        $QT_SRC_CONFIGURE -qt-host-path $QT_ROOT_DIR -platform wasm-emscripten -init-submodules -submodules qtdeclarative,qtbase -skip qtlanguageserver,qtquicktimeline,qtimageformats
        
    - name: Build Qt for Webassembly (custom version)
      shell: bash
      run: |
        cd qt_wasm_build
        ${{env.QT_SRC_CONFIGURE}} -qt-host-path $QT_ROOT_DIR -platform wasm-emscripten -release -optimize-size -submodules qtdeclarative,qtbase -skip qtlanguageserver,qtquicktimeline,qtimageformats -make libs -gui -no-feature-thread -prefix "${QT_WASM_ROOT_DIR}/" 
        cmake --build . --parallel && cmake --install .
        # Fail if the directory is not created or is empty
        [ -d "$QT_WASM_ROOT_DIR" ] && [ "$(ls -A $QT_WASM_ROOT_DIR)" ] || exit 1
      
    - name: Configure
      env:
        CMAKE_PREFIX_PATH: ${{env.Qt6_DIR}}/lib/cmake
      run: >
        ${QT_WASM_ROOT_DIR}/bin/qt-cmake
        -G Ninja
        -B $BUILD_DIR
        -DCMAKE_BUILD_TYPE=MinSizeRel
        -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR
        -S ${{ github.workspace }}

    - name: Build
      run: |
        cmake --build $BUILD_DIR --target install 2>&1 | tee build_output.log
        if grep -q "One Definition Rule" build_output.log; then
          echo "Error: Found 'One Definition Rule' in build output."
          exit 1
        fi


